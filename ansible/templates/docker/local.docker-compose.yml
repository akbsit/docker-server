version: '3.1'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

{% if INSTALL_REDIS or INSTALL_MYSQL %}
volumes:
{% if INSTALL_REDIS %}
  redis:
    driver: ${VOLUMES_DRIVER}
{% endif %}
{% if INSTALL_MYSQL %}
  mysql:
    driver: ${VOLUMES_DRIVER}
{% endif %}
{% endif %}

services:

  workspace:
    build:
      context: ./services/workspace
      dockerfile: ./version/{{ PHP_VERSION }}/Dockerfile
      args:
        - CONTAINER_WORKDIR=${CONTAINER_WORKDIR_PATH}
        - INSTALL_NODE=${WORKSPACE_ENABLE_NODE}
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-workspace
    volumes:
      - ${EXTERNAL_WORKDIR_PATH}:${CONTAINER_WORKDIR_PATH}
{% if INSTALL_SUPERVISOR %}
      - ${EXTERNAL_SUPERVISOR_PATH}:${CONTAINER_SUPERVISOR_PATH}
{% endif %}
    ports:
      - '${EXTERNAL_WORKSPACE_PORT}:${CONTAINER_WORKSPACE_PORT}'
    tty: true
    networks:
      - backend

{% if INSTALL_REDIS %}
  redis:
    build:
      context: ./services/redis
      args:
        - REDIS_PASSWORD={{ REDIS_PASSWORD }}
        - CONTAINER_EXPOSE={{ CONTAINER_REDIS_PORT }}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-redis
    restart: 'no'
    volumes:
      - ${EXTERNAL_REDIS_PATH}:${CONTAINER_REDIS_PATH}
    ports:
      - '${EXTERNAL_REDIS_PORT}:{{ CONTAINER_REDIS_PORT }}'
    networks:
      - backend
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
{% endif %}

{% if INSTALL_SUPERVISOR %}
  supervisor:
    build:
      context: ./services/supervisor
      args:
        - PHP_VERSION={{ PHP_VERSION }}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-supervisor
    volumes:
      - ${EXTERNAL_WORKDIR_PATH}:${CONTAINER_WORKDIR_PATH}:cached
      - ${EXTERNAL_SUPERVISOR_PATH}:${CONTAINER_SUPERVISOR_PATH}
    depends_on:
      - workspace
    extra_hosts:
      - 'dockerhost:${DOCKER_HOST_IP}'
    networks:
      - backend
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
{% endif %}

{% if INSTALL_LARAVEL_HORIZON %}
  laravel-horizon:
    build:
      context: ./services/laravel-horizon
      args:
        - CHANGE_SOURCE=${LARAVEL_HORIZON_CHANGE_SOURCE}
        - PHP_VERSION={{ PHP_VERSION }}
        - INSTALL_BCMATH=${LARAVEL_HORIZON_ENABLE_BCMATH}
        - INSTALL_PHPREDIS=${LARAVEL_HORIZON_ENABLE_PHPREDIS}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-laravel-horizon
    volumes:
      - ${EXTERNAL_WORKDIR_PATH}:${CONTAINER_WORKDIR_PATH}
      - ${EXTERNAL_LARAVEL_HORIZON_PATH}:${CONTAINER_LARAVEL_HORIZON_PATH}
    depends_on:
      - workspace
    extra_hosts:
      - 'dockerhost:${DOCKER_HOST_IP}'
    networks:
      - backend
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
{% endif %}

{% if INSTALL_LARAVEL_ECHO_SERVER %}
  laravel-echo-server:
    build:
      context: ./services/laravel-echo-server
      args:
        - CONTAINER_EXPOSE=${CONTAINER_LARAVEL_ECHO_SERVER_PORT}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-laravel-echo-server
    ports:
      - '${EXTERNAL_LARAVEL_ECHO_SERVER_PORT}:${CONTAINER_LARAVEL_ECHO_SERVER_PORT}'
    depends_on:
      - redis
    networks:
      - backend
{% endif %}

{% if INSTALL_PHP_FPM %}
  php-fpm:
    build:
      context: ./services/php-fpm/version/{{ PHP_VERSION }}
      args:
        - CONTAINER_WORKDIR=${CONTAINER_WORKDIR_PATH}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-php-fpm
    volumes:
      - ${EXTERNAL_WORKDIR_PATH}:${CONTAINER_WORKDIR_PATH}
      - ${EXTERNAL_PHP_FPM_PATH}:${CONTAINER_PHP_FPM_PATH}
    depends_on:
      - workspace
    networks:
      - backend
{% endif %}

{% if INSTALL_NGINX %}
  nginx:
    build:
      context: ./services/nginx
      args:
        - CONTAINER_WORKDIR=${CONTAINER_WORKDIR_PATH}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-nginx
    volumes:
      - ${EXTERNAL_WORKDIR_PATH}:${CONTAINER_WORKDIR_PATH}
      - ${EXTERNAL_NGINX_PATH}:${CONTAINER_NGINX_PATH}
      - ${EXTERNAL_NGINX_LOG_PATH}:${CONTAINER_NGINX_LOG_PATH}
    ports:
      - '${EXTERNAL_NGINX_PORT}:${CONTAINER_NGINX_PORT}'
    depends_on:
      - php-fpm
    networks:
      - backend
{% endif %}

{% if INSTALL_MYSQL %}
  mysql:
    build:
      context: ./services/mysql
      args:
        - MYSQL_VERSION={{ MYSQL_VERSION }}
        - TZ=${MYSQL_TIMEZONE}
        - CONTAINER_WORKDIR=${CONTAINER_WORKDIR_PATH}
        - CONTAINER_EXPOSE=${CONTAINER_MYSQL_PORT}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-mysql
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_ROOT_PASSWORD={{ MYSQL_ROOT_PASSWORD }}
      - MYSQL_DATABASE={{ MYSQL_DATABASE }}
      - MYSQL_USER={{ MYSQL_USER }}
      - MYSQL_PASSWORD={{ MYSQL_PASSWORD }}
      - TZ=${MYSQL_TIMEZONE}
    volumes:
      - ./.data/mysql-{{ MYSQL_VERSION }}:/var/lib/mysql
      - ${EXTERNAL_MYSQL_PATH}:${CONTAINER_MYSQL_PATH}
    ports:
      - '${EXTERNAL_MYSQL_PORT}:${CONTAINER_MYSQL_PORT}'
    depends_on:
      - nginx
    networks:
      - backend
{% endif %}

{% if INSTALL_MAILDEV %}
  maildev:
    build:
      context: ./services/maildev
      args:
        - EXPOSE_HTTP_PORT=${CONTAINER_MAILDEV_HTTP_PORT}
        - EXPOSE_SMTP_PORT=${CONTAINER_MAILDEV_SMTP_PORT}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-maildev
    ports:
      - '${EXTERNAL_MAILDEV_HTTP_PORT}:${CONTAINER_MAILDEV_HTTP_PORT}'
      - '${EXTERNAL_MAILDEV_SMTP_PORT}:${CONTAINER_MAILDEV_SMTP_PORT}'
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
{% endif %}

{% if INSTALL_BEANSTALKD %}
  beanstalkd:
    build:
      context: ./services/beanstalkd
      args:
        - CONTAINER_EXPOSE=${CONTAINER_BEANSTALKD_PORT}
    container_name: ${CONTAINER_PREFIX}{{ CONTAINER_NAME }}-beanstalkd
    ports:
      - '${EXTERNAL_BEANSTALKD_PORT}:${CONTAINER_BEANSTALKD_PORT}'
    privileged: true
    depends_on:
      - php-fpm
    networks:
      - backend
{% endif %}
